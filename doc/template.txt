*template.txt*         For Neovim >= 0.8.0         Last change: 2025 August 05

==============================================================================
Table of Contents                                 *template-table-of-contents*

  - Features                                               |template-features|
  - Setup                                                     |template-setup|
  - Usage                                                     |template-usage|
  - What’s Next                                     |template-what’s-next|
  - Behind The Code                                 |template-behind-the-code|

template.nvim is a neovim plugin that allows neovim users to `<action>`.


FEATURES                                                   *template-features*

- **Modern Plugin Architecture**Ready-to-go Neovim plugin template with best practices
- **Unified Command System**Modern command interface with tab completion support
- **Type Safety**Comprehensive type annotations using LSP-compatible `@class` and `@param`
- **DRY Code Patterns**Reusable helper functions and modular design
- **CI/CD Ready**Lint and test GitHub Actions included
- **Auto Documentation**GitHub Action to auto-generate vimdocs
- **Professional README**Complete template with modern formatting
- **Integration Ready**Works seamlessly with mkrepo <https://github.com/2kabhishek/mkrepo>


SETUP                                                         *template-setup*


REQUIREMENTS ~

- Latest version of `neovim`


INSTALLATION ~

>lua
    -- Lazy
    {
        '2kabhishek/template.nvim',
        cmd = { 'Template' },
        keys = { '<leader>th', '<leader>tH', },
        -- Add your custom configs here, keep it blank for default configs (required)
        opts = {},
        -- Use this for local development
        -- dir = '~/path-to/template.nvim',
    },
<


USAGE                                                         *template-usage*

1. Fork the `template.nvim` repo
2. Update the plugin name, file names etc, change `template` to `your-plugin-name`
3. Add the code required for your plugin:- **Code entrypoint**template.lua <./lua/template.lua> - Main setup function
- **User configs**config.lua <./lua/template/config.lua> - Configuration with type annotations
- **Commands**commands.lua <./lua/template/commands.lua> - Modern command system with completion
- **Plugin logic**module.lua <./lua/template/module.lua> - Core functionality with type safety
- **Additional modules**Add more modules under modules <./lua/template/> directory as needed


4. **Command System Features**- Unifiedcommand interface with subcommands
- Tab completion support for better UX
- Reusable helper functions for DRY code
- Comprehensive type annotations for better development experience


5. Add test code to the tests <./tests/> directory
6. Update the README with your plugin’s functionality
7. Tweak the docs action <./.github/workflows/docs.yml> file to reflect your plugin name, commit email and username- Generating vimdocs needs read and write access to actions (repo settings > actions > general > workflow permissions)




CONFIGURATION ~

template.nvim can be configured using the following options:

>lua
    template.setup({
        name = 'template.nvim', -- Name to be greeted, 'World!' by default
        add_default_keybindings = true, -- Whether to add default keybindings
    })
<


COMMANDS ~

`template.nvim` provides a unified command interface with tab completion:

- `Template greet [name]` - Shows a hello message with the specified name (with tab completion)
- `Template notify [message]` - Shows a notification with custom message


KEYBINDINGS ~

Here are the default keybindings:

  Keybinding   Command                 Description
  ------------ ----------------------- -----------------------------
  <leader>th   Template greet          Template greet default name
  <leader>tH   Template greet Neovim   Template greet Neovim

  You can disable default keybindings by setting `add_default_keybindings =
  false` in your config.

HELP ~

Run `:help template.txt` for more details.


WHAT’S NEXT                                         *template-what’s-next*

Planning to add `<feature/module>`.


TO-DO ~

- Setup repo
- Think real hard
- Start typing


BEHIND THE CODE                                     *template-behind-the-code*


INSPIRATION ~

template.nvim was inspired by nvim-plugin-template
<https://github.com/ellisonleao/nvim-plugin-template>, I added some changes on
top to make setting up a new plugin faster.


CHALLENGES/LEARNINGS ~

- The main challenges were `<issue/difficulty>`
- I learned about `<learning/accomplishment>`


TOOLING ~

- dots2k <https://github.com/2kabhishek/dots2k> — Dev Environment
- nvim2k <https://github.com/2kabhishek/nvim2k> — Personalized Editor
- sway2k <https://github.com/2kabhishek/sway2k> — Desktop Environment
- qute2k <https://github.com/2kabhishek/qute2k> — Personalized Browser


MORE INFO ~

- nerdy.nvim <https://github.com/2kabhishek/nerdy.nvim> — Find nerd glyphs easily
- tdo.nvim <https://github.com/2KAbhishek/tdo.nvim> — Fast and simple notes in Neovim
- termim.nvim <https://github.com/2kabhishek/termim.nvim> — Neovim terminal improved
- octohub.nvim <https://github.com/2kabhishek/octohub.nvim> — Github repos in Neovim
- exercism.nvim <https://github.com/2kabhishek/exercism.nvim> — Exercism exercises in Neovim


Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
